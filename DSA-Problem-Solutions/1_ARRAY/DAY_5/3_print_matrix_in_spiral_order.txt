https://leetcode.com/problems/spiral-matrix/description/

it's the only solution not brute better optimal
Tc--> O(n*m)

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {

        int n = matrix.size();
        int m = matrix[0].size();
        
        //right --> bottom --> left --> top

        int left = 0, right = m-1, top = 0, bottom = n-1;

        vector<int> ans;

        while(top<=bottom && left<=right){
            //left 
            for(int i=left; i<=right; i++){
                ans.push_back(matrix[top][i]);
            }
            top++;

            //bottom
            for(int i=top; i<=bottom; i++){
                ans.push_back(matrix[i][right]);
            }
            right--;

            //left
            if(top <= bottom){
                for(int i=right; i>=left; i--){
                    ans.push_back(matrix[bottom][i]);
                }
                bottom--;
            }

            //top
            if(left <= right){
                for(int i=bottom; i>=top; i--){
                    ans.push_back(matrix[i][left]);
                }
                left++;
            }
        }

        return ans; 
    }
};
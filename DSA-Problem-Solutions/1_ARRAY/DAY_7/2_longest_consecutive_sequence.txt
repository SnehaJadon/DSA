https://leetcode.com/problems/longest-consecutive-sequence/

brute -- Tc--n square around

class Solution {
public:
    bool linearSearch(vector<int> a, int key){
        for(int i=0; i<a.size(); i++){
            if(a[i] == key) return true;
        }
        return false;
    }
    int longestConsecutive(vector<int>& nums) {

        int longest = 1;

        for(int i=0 ; i<nums.size(); i++){
        int key = nums[i];
        int count = 1;
            while (linearSearch(nums, key + 1) == true) {
                key += 1;
                count += 1;
            }

            longest = max(longest, count);
        }
        return longest;
    }
};

better - > nlogn + O(n)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();

        if(n == 0) return 0;
        sort(nums.begin(), nums.end());

        int lastSmaller = INT_MIN, count = 0, longest = 1;

        for(int i=0; i<n; i++){
            if(nums[i] - 1 == lastSmaller){
                count += 1;
                lastSmaller = nums[i];
            }
            else if(nums[i] != lastSmaller){
                count = 1;
                lastSmaller = nums[i];
            }
            longest = max(longest, count);
        }

        return longest;
        
    }
};

optimal 

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return 0;

        unordered_set<int> st;
        int longest = 1;

        for(int i=0; i<n; i++){
            st.insert(nums[i]);
        }

        for(auto it: st){
            //if it's a first element
            if(st.find(it-1) == st.end()){
                int firstEle = it;
                int count = 1;
                while(st.find(firstEle+1) != st.end()){
                    count ++;
                    firstEle ++;
                }
                longest = max(longest, count);
            }
        }

        return longest;

        
    }
};
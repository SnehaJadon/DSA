brute force -- Tc- O(n square) and SC-> O(1)
because always 2 elements atmax can be a ans

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;

        for(int i=0; i<n; i++){
            if(ans.size() == 0 || ans[0] != nums[i]){
                int count = 0;
                for(int j=0; j<n; j++){
                    if(nums[j] == nums[i]){
                        count++;
                    }
                }
                if(count > (n/3)) ans.push_back(nums[i]);
            }
            if(ans.size() == 2) break;
        }
        return ans;
        
    }
};

################################################################################

Better approach using hash map 

Tc--> O(n) * log n if worst case then it will be O(n) and in best O(1)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int n = nums.size();
        unordered_map<int,int> mp;

        for(int i=0; i<n; i++){
            mp[nums[i]]++;
        }

        for(auto it: mp){
            if(it.second > (n/3)){
                ans.push_back(it.first);
            }
        }

        return ans;
        
    }
};

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int n = nums.size();
        unordered_map<int,int> mp;

        int mini = (n/3) + 1;

        for(int i=0; i<n; i++){
            mp[nums[i]]++;
            if(mp[nums[i]] == mini){
                ans.push_back(nums[i]);
            }
        }
        return ans;
        
    }
};

####################################################################

optimal - Tc- O(2n)
approach just similar to majority ele 1

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int count0 = 0, count1 = 0, ele1 = INT_MIN, ele2 = INT_MIN;

        for(int i=0; i<n; i++){
            if(count0 == 0 && nums[i] != ele2){
                count0++;
                ele1 = nums[i];
            }
            else if(count1 == 0 && nums[i] != ele1){
                count1++;
                ele2 = nums[i];
            }
            else if(nums[i] == ele1) count0 ++;
            else if(nums[i] == ele2) count1 ++;
            else {
                count0--;
                count1--;
            }
        }

        //manual check
        count0 = 0; count1= 0;
        for(int i=0; i<n; i++){
            if(nums[i] == ele1){
                count0++;
            }
            if(nums[i] == ele2){
                count1++;
            }
        }

        int mini = (n/3) + 1;
        vector<int> ans;
        if(count0 >= mini) ans.push_back(ele1);
        if(count1 >= mini) ans.push_back(ele2);
        
        return ans;
    }
};
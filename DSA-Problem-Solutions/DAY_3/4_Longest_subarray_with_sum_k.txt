

class Solution{
    public:
    
    int max (int num1, int num2){
        if(num1 > num2) return num1;
        return num2;
    }
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
        int sum = 0, maxLen = 0;
        for(int i=0; i<N; i++){
            sum = 0;
            for(int j=i; j<N; j++){
                sum+= A[j];
                if(sum == K){
                    maxLen = max(maxLen, (j-i)+1);
                }
            }
        }
        
        return maxLen;
    } 

};
################################################################################################

//This will be the optimal code when the numbers are positive, negative and zeroes
//This will be the better code when the numbers are positive, zeroes

    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
   
        map<int, int> preSumMap;
        int sum = 0;
        int maxLen = 0;
        for (int i = 0; i < N; i++) {
            sum += A[i];
            if (sum == K) {
                maxLen = max(maxLen, i + 1);
            }

            //now find remaining in map    
            int rem = sum - K;
            if (preSumMap.find(rem) != preSumMap.end()) {
                int len = i - preSumMap[rem];
                maxLen = max(maxLen, len);
            }
    
            //condition, when store in map:
            if (preSumMap.find(sum) == preSumMap.end()) {
                preSumMap[sum] = i;
            }
        }
    
        return maxLen;
        
        
    } 



####################################################################################################

//This will be the optimal code when the numbers are positive, zeroes

class Solution{
    public:
    
    int max (int num1, int num2){
        if(num1 > num2) return num1;
        return num2;
    }
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
        int sum = A[0], maxLen = 0;
        
        int left = 0, right = 0;
        
        while(right<N){
            while(left <= right && sum > K){
                sum -= A[left];
                left++;
            }
            
            if(sum == K){
                maxLen = max(maxLen , right-left +1);
            }
            
            right++;
            if(right < N) sum+=A[right];
        }
        
        return maxLen;
        
    } 

};
https://leetcode.com/problems/rotate-list/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int len(ListNode* head){
        int length = 0;
        while(head){
            head = head->next;
            length++;
        }
        return length;
    }
    ListNode* rotateRight(ListNode* head, int k) {
        int length = len(head);
        if(length==0 || k==0) return head;
        k = k % length;
        if(k==0) return head;

        int diff = length - k;
        ListNode *temp = new ListNode();
        temp->next = head;

        while(diff--){
            cout<<temp->val<<" ";
            temp=temp->next;
        }
        
        ListNode *finalHead = temp->next;
        temp->next = nullptr;
        temp = finalHead;
        while(temp->next){
            temp=temp->next;
        }

        temp->next = head;
        return finalHead;     

    }   
};